/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.poc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class instrument_reference_data_values extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8594243793444388413L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"instrument_reference_data_values\",\"namespace\":\"kafka.poc\",\"fields\":[{\"name\":\"asset_class\",\"type\":\"string\"},{\"name\":\"COI\",\"type\":\"string\"},{\"name\":\"RIC\",\"type\":\"string\"},{\"name\":\"ISIN\",\"type\":\"string\"},{\"name\":\"SEDOL\",\"type\":\"string\"},{\"name\":\"Ticker\",\"type\":\"string\"},{\"name\":\"Cusip\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<instrument_reference_data_values> ENCODER =
      new BinaryMessageEncoder<instrument_reference_data_values>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<instrument_reference_data_values> DECODER =
      new BinaryMessageDecoder<instrument_reference_data_values>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<instrument_reference_data_values> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<instrument_reference_data_values> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<instrument_reference_data_values>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this instrument_reference_data_values to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a instrument_reference_data_values from a ByteBuffer. */
  public static instrument_reference_data_values fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence asset_class;
  @Deprecated public java.lang.CharSequence COI;
  @Deprecated public java.lang.CharSequence RIC;
  @Deprecated public java.lang.CharSequence ISIN;
  @Deprecated public java.lang.CharSequence SEDOL;
  @Deprecated public java.lang.CharSequence Ticker;
  @Deprecated public java.lang.CharSequence Cusip;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public instrument_reference_data_values() {}

  /**
   * All-args constructor.
   * @param asset_class The new value for asset_class
   * @param COI The new value for COI
   * @param RIC The new value for RIC
   * @param ISIN The new value for ISIN
   * @param SEDOL The new value for SEDOL
   * @param Ticker The new value for Ticker
   * @param Cusip The new value for Cusip
   */
  public instrument_reference_data_values(java.lang.CharSequence asset_class, java.lang.CharSequence COI, java.lang.CharSequence RIC, java.lang.CharSequence ISIN, java.lang.CharSequence SEDOL, java.lang.CharSequence Ticker, java.lang.CharSequence Cusip) {
    this.asset_class = asset_class;
    this.COI = COI;
    this.RIC = RIC;
    this.ISIN = ISIN;
    this.SEDOL = SEDOL;
    this.Ticker = Ticker;
    this.Cusip = Cusip;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return asset_class;
    case 1: return COI;
    case 2: return RIC;
    case 3: return ISIN;
    case 4: return SEDOL;
    case 5: return Ticker;
    case 6: return Cusip;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: asset_class = (java.lang.CharSequence)value$; break;
    case 1: COI = (java.lang.CharSequence)value$; break;
    case 2: RIC = (java.lang.CharSequence)value$; break;
    case 3: ISIN = (java.lang.CharSequence)value$; break;
    case 4: SEDOL = (java.lang.CharSequence)value$; break;
    case 5: Ticker = (java.lang.CharSequence)value$; break;
    case 6: Cusip = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'asset_class' field.
   * @return The value of the 'asset_class' field.
   */
  public java.lang.CharSequence getAssetClass() {
    return asset_class;
  }

  /**
   * Sets the value of the 'asset_class' field.
   * @param value the value to set.
   */
  public void setAssetClass(java.lang.CharSequence value) {
    this.asset_class = value;
  }

  /**
   * Gets the value of the 'COI' field.
   * @return The value of the 'COI' field.
   */
  public java.lang.CharSequence getCOI() {
    return COI;
  }

  /**
   * Sets the value of the 'COI' field.
   * @param value the value to set.
   */
  public void setCOI(java.lang.CharSequence value) {
    this.COI = value;
  }

  /**
   * Gets the value of the 'RIC' field.
   * @return The value of the 'RIC' field.
   */
  public java.lang.CharSequence getRIC() {
    return RIC;
  }

  /**
   * Sets the value of the 'RIC' field.
   * @param value the value to set.
   */
  public void setRIC(java.lang.CharSequence value) {
    this.RIC = value;
  }

  /**
   * Gets the value of the 'ISIN' field.
   * @return The value of the 'ISIN' field.
   */
  public java.lang.CharSequence getISIN() {
    return ISIN;
  }

  /**
   * Sets the value of the 'ISIN' field.
   * @param value the value to set.
   */
  public void setISIN(java.lang.CharSequence value) {
    this.ISIN = value;
  }

  /**
   * Gets the value of the 'SEDOL' field.
   * @return The value of the 'SEDOL' field.
   */
  public java.lang.CharSequence getSEDOL() {
    return SEDOL;
  }

  /**
   * Sets the value of the 'SEDOL' field.
   * @param value the value to set.
   */
  public void setSEDOL(java.lang.CharSequence value) {
    this.SEDOL = value;
  }

  /**
   * Gets the value of the 'Ticker' field.
   * @return The value of the 'Ticker' field.
   */
  public java.lang.CharSequence getTicker() {
    return Ticker;
  }

  /**
   * Sets the value of the 'Ticker' field.
   * @param value the value to set.
   */
  public void setTicker(java.lang.CharSequence value) {
    this.Ticker = value;
  }

  /**
   * Gets the value of the 'Cusip' field.
   * @return The value of the 'Cusip' field.
   */
  public java.lang.CharSequence getCusip() {
    return Cusip;
  }

  /**
   * Sets the value of the 'Cusip' field.
   * @param value the value to set.
   */
  public void setCusip(java.lang.CharSequence value) {
    this.Cusip = value;
  }

  /**
   * Creates a new instrument_reference_data_values RecordBuilder.
   * @return A new instrument_reference_data_values RecordBuilder
   */
  public static kafka.poc.instrument_reference_data_values.Builder newBuilder() {
    return new kafka.poc.instrument_reference_data_values.Builder();
  }

  /**
   * Creates a new instrument_reference_data_values RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new instrument_reference_data_values RecordBuilder
   */
  public static kafka.poc.instrument_reference_data_values.Builder newBuilder(kafka.poc.instrument_reference_data_values.Builder other) {
    return new kafka.poc.instrument_reference_data_values.Builder(other);
  }

  /**
   * Creates a new instrument_reference_data_values RecordBuilder by copying an existing instrument_reference_data_values instance.
   * @param other The existing instance to copy.
   * @return A new instrument_reference_data_values RecordBuilder
   */
  public static kafka.poc.instrument_reference_data_values.Builder newBuilder(kafka.poc.instrument_reference_data_values other) {
    return new kafka.poc.instrument_reference_data_values.Builder(other);
  }

  /**
   * RecordBuilder for instrument_reference_data_values instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<instrument_reference_data_values>
    implements org.apache.avro.data.RecordBuilder<instrument_reference_data_values> {

    private java.lang.CharSequence asset_class;
    private java.lang.CharSequence COI;
    private java.lang.CharSequence RIC;
    private java.lang.CharSequence ISIN;
    private java.lang.CharSequence SEDOL;
    private java.lang.CharSequence Ticker;
    private java.lang.CharSequence Cusip;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.poc.instrument_reference_data_values.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.asset_class)) {
        this.asset_class = data().deepCopy(fields()[0].schema(), other.asset_class);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.COI)) {
        this.COI = data().deepCopy(fields()[1].schema(), other.COI);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.RIC)) {
        this.RIC = data().deepCopy(fields()[2].schema(), other.RIC);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ISIN)) {
        this.ISIN = data().deepCopy(fields()[3].schema(), other.ISIN);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SEDOL)) {
        this.SEDOL = data().deepCopy(fields()[4].schema(), other.SEDOL);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Ticker)) {
        this.Ticker = data().deepCopy(fields()[5].schema(), other.Ticker);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Cusip)) {
        this.Cusip = data().deepCopy(fields()[6].schema(), other.Cusip);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing instrument_reference_data_values instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.poc.instrument_reference_data_values other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.asset_class)) {
        this.asset_class = data().deepCopy(fields()[0].schema(), other.asset_class);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.COI)) {
        this.COI = data().deepCopy(fields()[1].schema(), other.COI);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.RIC)) {
        this.RIC = data().deepCopy(fields()[2].schema(), other.RIC);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.ISIN)) {
        this.ISIN = data().deepCopy(fields()[3].schema(), other.ISIN);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.SEDOL)) {
        this.SEDOL = data().deepCopy(fields()[4].schema(), other.SEDOL);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.Ticker)) {
        this.Ticker = data().deepCopy(fields()[5].schema(), other.Ticker);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.Cusip)) {
        this.Cusip = data().deepCopy(fields()[6].schema(), other.Cusip);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'asset_class' field.
      * @return The value.
      */
    public java.lang.CharSequence getAssetClass() {
      return asset_class;
    }

    /**
      * Sets the value of the 'asset_class' field.
      * @param value The value of 'asset_class'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setAssetClass(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.asset_class = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'asset_class' field has been set.
      * @return True if the 'asset_class' field has been set, false otherwise.
      */
    public boolean hasAssetClass() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'asset_class' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearAssetClass() {
      asset_class = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'COI' field.
      * @return The value.
      */
    public java.lang.CharSequence getCOI() {
      return COI;
    }

    /**
      * Sets the value of the 'COI' field.
      * @param value The value of 'COI'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setCOI(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.COI = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'COI' field has been set.
      * @return True if the 'COI' field has been set, false otherwise.
      */
    public boolean hasCOI() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'COI' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearCOI() {
      COI = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'RIC' field.
      * @return The value.
      */
    public java.lang.CharSequence getRIC() {
      return RIC;
    }

    /**
      * Sets the value of the 'RIC' field.
      * @param value The value of 'RIC'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setRIC(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.RIC = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'RIC' field has been set.
      * @return True if the 'RIC' field has been set, false otherwise.
      */
    public boolean hasRIC() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'RIC' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearRIC() {
      RIC = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'ISIN' field.
      * @return The value.
      */
    public java.lang.CharSequence getISIN() {
      return ISIN;
    }

    /**
      * Sets the value of the 'ISIN' field.
      * @param value The value of 'ISIN'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setISIN(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.ISIN = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'ISIN' field has been set.
      * @return True if the 'ISIN' field has been set, false otherwise.
      */
    public boolean hasISIN() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'ISIN' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearISIN() {
      ISIN = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'SEDOL' field.
      * @return The value.
      */
    public java.lang.CharSequence getSEDOL() {
      return SEDOL;
    }

    /**
      * Sets the value of the 'SEDOL' field.
      * @param value The value of 'SEDOL'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setSEDOL(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.SEDOL = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'SEDOL' field has been set.
      * @return True if the 'SEDOL' field has been set, false otherwise.
      */
    public boolean hasSEDOL() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'SEDOL' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearSEDOL() {
      SEDOL = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'Ticker' field.
      * @return The value.
      */
    public java.lang.CharSequence getTicker() {
      return Ticker;
    }

    /**
      * Sets the value of the 'Ticker' field.
      * @param value The value of 'Ticker'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setTicker(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.Ticker = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'Ticker' field has been set.
      * @return True if the 'Ticker' field has been set, false otherwise.
      */
    public boolean hasTicker() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'Ticker' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearTicker() {
      Ticker = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'Cusip' field.
      * @return The value.
      */
    public java.lang.CharSequence getCusip() {
      return Cusip;
    }

    /**
      * Sets the value of the 'Cusip' field.
      * @param value The value of 'Cusip'.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder setCusip(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.Cusip = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'Cusip' field has been set.
      * @return True if the 'Cusip' field has been set, false otherwise.
      */
    public boolean hasCusip() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'Cusip' field.
      * @return This builder.
      */
    public kafka.poc.instrument_reference_data_values.Builder clearCusip() {
      Cusip = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public instrument_reference_data_values build() {
      try {
        instrument_reference_data_values record = new instrument_reference_data_values();
        record.asset_class = fieldSetFlags()[0] ? this.asset_class : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.COI = fieldSetFlags()[1] ? this.COI : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.RIC = fieldSetFlags()[2] ? this.RIC : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.ISIN = fieldSetFlags()[3] ? this.ISIN : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.SEDOL = fieldSetFlags()[4] ? this.SEDOL : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.Ticker = fieldSetFlags()[5] ? this.Ticker : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.Cusip = fieldSetFlags()[6] ? this.Cusip : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<instrument_reference_data_values>
    WRITER$ = (org.apache.avro.io.DatumWriter<instrument_reference_data_values>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<instrument_reference_data_values>
    READER$ = (org.apache.avro.io.DatumReader<instrument_reference_data_values>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
