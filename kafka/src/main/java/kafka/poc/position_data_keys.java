/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.poc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class position_data_keys extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8862845213805254850L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"position_data_keys\",\"namespace\":\"kafka.poc\",\"fields\":[{\"name\":\"knowledge_date\",\"type\":[\"null\",\"string\"]},{\"name\":\"effective_date\",\"type\":[\"null\",\"string\"]},{\"name\":\"position_type\",\"type\":[\"null\",\"string\"]},{\"name\":\"account\",\"type\":[\"null\",\"string\"]},{\"name\":\"ric\",\"type\":[\"null\",\"string\"]},{\"name\":\"purpose\",\"type\":[\"null\",\"string\"]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<position_data_keys> ENCODER =
      new BinaryMessageEncoder<position_data_keys>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<position_data_keys> DECODER =
      new BinaryMessageDecoder<position_data_keys>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<position_data_keys> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<position_data_keys> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<position_data_keys>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this position_data_keys to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a position_data_keys from a ByteBuffer. */
  public static position_data_keys fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence knowledge_date;
  @Deprecated public java.lang.CharSequence effective_date;
  @Deprecated public java.lang.CharSequence position_type;
  @Deprecated public java.lang.CharSequence account;
  @Deprecated public java.lang.CharSequence ric;
  @Deprecated public java.lang.CharSequence purpose;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public position_data_keys() {}

  /**
   * All-args constructor.
   * @param knowledge_date The new value for knowledge_date
   * @param effective_date The new value for effective_date
   * @param position_type The new value for position_type
   * @param account The new value for account
   * @param ric The new value for ric
   * @param purpose The new value for purpose
   */
  public position_data_keys(java.lang.CharSequence knowledge_date, java.lang.CharSequence effective_date, java.lang.CharSequence position_type, java.lang.CharSequence account, java.lang.CharSequence ric, java.lang.CharSequence purpose) {
    this.knowledge_date = knowledge_date;
    this.effective_date = effective_date;
    this.position_type = position_type;
    this.account = account;
    this.ric = ric;
    this.purpose = purpose;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return knowledge_date;
    case 1: return effective_date;
    case 2: return position_type;
    case 3: return account;
    case 4: return ric;
    case 5: return purpose;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: knowledge_date = (java.lang.CharSequence)value$; break;
    case 1: effective_date = (java.lang.CharSequence)value$; break;
    case 2: position_type = (java.lang.CharSequence)value$; break;
    case 3: account = (java.lang.CharSequence)value$; break;
    case 4: ric = (java.lang.CharSequence)value$; break;
    case 5: purpose = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'knowledge_date' field.
   * @return The value of the 'knowledge_date' field.
   */
  public java.lang.CharSequence getKnowledgeDate() {
    return knowledge_date;
  }

  /**
   * Sets the value of the 'knowledge_date' field.
   * @param value the value to set.
   */
  public void setKnowledgeDate(java.lang.CharSequence value) {
    this.knowledge_date = value;
  }

  /**
   * Gets the value of the 'effective_date' field.
   * @return The value of the 'effective_date' field.
   */
  public java.lang.CharSequence getEffectiveDate() {
    return effective_date;
  }

  /**
   * Sets the value of the 'effective_date' field.
   * @param value the value to set.
   */
  public void setEffectiveDate(java.lang.CharSequence value) {
    this.effective_date = value;
  }

  /**
   * Gets the value of the 'position_type' field.
   * @return The value of the 'position_type' field.
   */
  public java.lang.CharSequence getPositionType() {
    return position_type;
  }

  /**
   * Sets the value of the 'position_type' field.
   * @param value the value to set.
   */
  public void setPositionType(java.lang.CharSequence value) {
    this.position_type = value;
  }

  /**
   * Gets the value of the 'account' field.
   * @return The value of the 'account' field.
   */
  public java.lang.CharSequence getAccount() {
    return account;
  }

  /**
   * Sets the value of the 'account' field.
   * @param value the value to set.
   */
  public void setAccount(java.lang.CharSequence value) {
    this.account = value;
  }

  /**
   * Gets the value of the 'ric' field.
   * @return The value of the 'ric' field.
   */
  public java.lang.CharSequence getRic() {
    return ric;
  }

  /**
   * Sets the value of the 'ric' field.
   * @param value the value to set.
   */
  public void setRic(java.lang.CharSequence value) {
    this.ric = value;
  }

  /**
   * Gets the value of the 'purpose' field.
   * @return The value of the 'purpose' field.
   */
  public java.lang.CharSequence getPurpose() {
    return purpose;
  }

  /**
   * Sets the value of the 'purpose' field.
   * @param value the value to set.
   */
  public void setPurpose(java.lang.CharSequence value) {
    this.purpose = value;
  }

  /**
   * Creates a new position_data_keys RecordBuilder.
   * @return A new position_data_keys RecordBuilder
   */
  public static kafka.poc.position_data_keys.Builder newBuilder() {
    return new kafka.poc.position_data_keys.Builder();
  }

  /**
   * Creates a new position_data_keys RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new position_data_keys RecordBuilder
   */
  public static kafka.poc.position_data_keys.Builder newBuilder(kafka.poc.position_data_keys.Builder other) {
    return new kafka.poc.position_data_keys.Builder(other);
  }

  /**
   * Creates a new position_data_keys RecordBuilder by copying an existing position_data_keys instance.
   * @param other The existing instance to copy.
   * @return A new position_data_keys RecordBuilder
   */
  public static kafka.poc.position_data_keys.Builder newBuilder(kafka.poc.position_data_keys other) {
    return new kafka.poc.position_data_keys.Builder(other);
  }

  /**
   * RecordBuilder for position_data_keys instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<position_data_keys>
    implements org.apache.avro.data.RecordBuilder<position_data_keys> {

    private java.lang.CharSequence knowledge_date;
    private java.lang.CharSequence effective_date;
    private java.lang.CharSequence position_type;
    private java.lang.CharSequence account;
    private java.lang.CharSequence ric;
    private java.lang.CharSequence purpose;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.poc.position_data_keys.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.knowledge_date)) {
        this.knowledge_date = data().deepCopy(fields()[0].schema(), other.knowledge_date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.effective_date)) {
        this.effective_date = data().deepCopy(fields()[1].schema(), other.effective_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.position_type)) {
        this.position_type = data().deepCopy(fields()[2].schema(), other.position_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ric)) {
        this.ric = data().deepCopy(fields()[4].schema(), other.ric);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.purpose)) {
        this.purpose = data().deepCopy(fields()[5].schema(), other.purpose);
        fieldSetFlags()[5] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing position_data_keys instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.poc.position_data_keys other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.knowledge_date)) {
        this.knowledge_date = data().deepCopy(fields()[0].schema(), other.knowledge_date);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.effective_date)) {
        this.effective_date = data().deepCopy(fields()[1].schema(), other.effective_date);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.position_type)) {
        this.position_type = data().deepCopy(fields()[2].schema(), other.position_type);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.account)) {
        this.account = data().deepCopy(fields()[3].schema(), other.account);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.ric)) {
        this.ric = data().deepCopy(fields()[4].schema(), other.ric);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.purpose)) {
        this.purpose = data().deepCopy(fields()[5].schema(), other.purpose);
        fieldSetFlags()[5] = true;
      }
    }

    /**
      * Gets the value of the 'knowledge_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getKnowledgeDate() {
      return knowledge_date;
    }

    /**
      * Sets the value of the 'knowledge_date' field.
      * @param value The value of 'knowledge_date'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setKnowledgeDate(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.knowledge_date = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'knowledge_date' field has been set.
      * @return True if the 'knowledge_date' field has been set, false otherwise.
      */
    public boolean hasKnowledgeDate() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'knowledge_date' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearKnowledgeDate() {
      knowledge_date = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'effective_date' field.
      * @return The value.
      */
    public java.lang.CharSequence getEffectiveDate() {
      return effective_date;
    }

    /**
      * Sets the value of the 'effective_date' field.
      * @param value The value of 'effective_date'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setEffectiveDate(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.effective_date = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'effective_date' field has been set.
      * @return True if the 'effective_date' field has been set, false otherwise.
      */
    public boolean hasEffectiveDate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'effective_date' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearEffectiveDate() {
      effective_date = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'position_type' field.
      * @return The value.
      */
    public java.lang.CharSequence getPositionType() {
      return position_type;
    }

    /**
      * Sets the value of the 'position_type' field.
      * @param value The value of 'position_type'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setPositionType(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.position_type = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'position_type' field has been set.
      * @return True if the 'position_type' field has been set, false otherwise.
      */
    public boolean hasPositionType() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'position_type' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearPositionType() {
      position_type = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'account' field.
      * @return The value.
      */
    public java.lang.CharSequence getAccount() {
      return account;
    }

    /**
      * Sets the value of the 'account' field.
      * @param value The value of 'account'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setAccount(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.account = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'account' field has been set.
      * @return True if the 'account' field has been set, false otherwise.
      */
    public boolean hasAccount() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'account' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearAccount() {
      account = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'ric' field.
      * @return The value.
      */
    public java.lang.CharSequence getRic() {
      return ric;
    }

    /**
      * Sets the value of the 'ric' field.
      * @param value The value of 'ric'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setRic(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.ric = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'ric' field has been set.
      * @return True if the 'ric' field has been set, false otherwise.
      */
    public boolean hasRic() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'ric' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearRic() {
      ric = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'purpose' field.
      * @return The value.
      */
    public java.lang.CharSequence getPurpose() {
      return purpose;
    }

    /**
      * Sets the value of the 'purpose' field.
      * @param value The value of 'purpose'.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder setPurpose(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.purpose = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'purpose' field has been set.
      * @return True if the 'purpose' field has been set, false otherwise.
      */
    public boolean hasPurpose() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'purpose' field.
      * @return This builder.
      */
    public kafka.poc.position_data_keys.Builder clearPurpose() {
      purpose = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public position_data_keys build() {
      try {
        position_data_keys record = new position_data_keys();
        record.knowledge_date = fieldSetFlags()[0] ? this.knowledge_date : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.effective_date = fieldSetFlags()[1] ? this.effective_date : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.position_type = fieldSetFlags()[2] ? this.position_type : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.account = fieldSetFlags()[3] ? this.account : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.ric = fieldSetFlags()[4] ? this.ric : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.purpose = fieldSetFlags()[5] ? this.purpose : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<position_data_keys>
    WRITER$ = (org.apache.avro.io.DatumWriter<position_data_keys>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<position_data_keys>
    READER$ = (org.apache.avro.io.DatumReader<position_data_keys>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
