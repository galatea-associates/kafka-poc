/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.poc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class position_data_values extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 695512700931852605L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"position_data_values\",\"namespace\":\"kafka.poc\",\"fields\":[{\"name\":\"direction\",\"type\":\"string\"},{\"name\":\"qty\",\"type\":\"int\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<position_data_values> ENCODER =
      new BinaryMessageEncoder<position_data_values>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<position_data_values> DECODER =
      new BinaryMessageDecoder<position_data_values>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<position_data_values> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<position_data_values> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<position_data_values>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this position_data_values to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a position_data_values from a ByteBuffer. */
  public static position_data_values fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence direction;
  @Deprecated public int qty;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public position_data_values() {}

  /**
   * All-args constructor.
   * @param direction The new value for direction
   * @param qty The new value for qty
   */
  public position_data_values(java.lang.CharSequence direction, java.lang.Integer qty) {
    this.direction = direction;
    this.qty = qty;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return direction;
    case 1: return qty;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: direction = (java.lang.CharSequence)value$; break;
    case 1: qty = (java.lang.Integer)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'direction' field.
   * @return The value of the 'direction' field.
   */
  public java.lang.CharSequence getDirection() {
    return direction;
  }

  /**
   * Sets the value of the 'direction' field.
   * @param value the value to set.
   */
  public void setDirection(java.lang.CharSequence value) {
    this.direction = value;
  }

  /**
   * Gets the value of the 'qty' field.
   * @return The value of the 'qty' field.
   */
  public java.lang.Integer getQty() {
    return qty;
  }

  /**
   * Sets the value of the 'qty' field.
   * @param value the value to set.
   */
  public void setQty(java.lang.Integer value) {
    this.qty = value;
  }

  /**
   * Creates a new position_data_values RecordBuilder.
   * @return A new position_data_values RecordBuilder
   */
  public static kafka.poc.position_data_values.Builder newBuilder() {
    return new kafka.poc.position_data_values.Builder();
  }

  /**
   * Creates a new position_data_values RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new position_data_values RecordBuilder
   */
  public static kafka.poc.position_data_values.Builder newBuilder(kafka.poc.position_data_values.Builder other) {
    return new kafka.poc.position_data_values.Builder(other);
  }

  /**
   * Creates a new position_data_values RecordBuilder by copying an existing position_data_values instance.
   * @param other The existing instance to copy.
   * @return A new position_data_values RecordBuilder
   */
  public static kafka.poc.position_data_values.Builder newBuilder(kafka.poc.position_data_values other) {
    return new kafka.poc.position_data_values.Builder(other);
  }

  /**
   * RecordBuilder for position_data_values instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<position_data_values>
    implements org.apache.avro.data.RecordBuilder<position_data_values> {

    private java.lang.CharSequence direction;
    private int qty;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.poc.position_data_values.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.direction)) {
        this.direction = data().deepCopy(fields()[0].schema(), other.direction);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing position_data_values instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.poc.position_data_values other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.direction)) {
        this.direction = data().deepCopy(fields()[0].schema(), other.direction);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.qty)) {
        this.qty = data().deepCopy(fields()[1].schema(), other.qty);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'direction' field.
      * @return The value.
      */
    public java.lang.CharSequence getDirection() {
      return direction;
    }

    /**
      * Sets the value of the 'direction' field.
      * @param value The value of 'direction'.
      * @return This builder.
      */
    public kafka.poc.position_data_values.Builder setDirection(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.direction = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'direction' field has been set.
      * @return True if the 'direction' field has been set, false otherwise.
      */
    public boolean hasDirection() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'direction' field.
      * @return This builder.
      */
    public kafka.poc.position_data_values.Builder clearDirection() {
      direction = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'qty' field.
      * @return The value.
      */
    public java.lang.Integer getQty() {
      return qty;
    }

    /**
      * Sets the value of the 'qty' field.
      * @param value The value of 'qty'.
      * @return This builder.
      */
    public kafka.poc.position_data_values.Builder setQty(int value) {
      validate(fields()[1], value);
      this.qty = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'qty' field has been set.
      * @return True if the 'qty' field has been set, false otherwise.
      */
    public boolean hasQty() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'qty' field.
      * @return This builder.
      */
    public kafka.poc.position_data_values.Builder clearQty() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public position_data_values build() {
      try {
        position_data_values record = new position_data_values();
        record.direction = fieldSetFlags()[0] ? this.direction : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.qty = fieldSetFlags()[1] ? this.qty : (java.lang.Integer) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<position_data_values>
    WRITER$ = (org.apache.avro.io.DatumWriter<position_data_values>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<position_data_values>
    READER$ = (org.apache.avro.io.DatumReader<position_data_values>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
