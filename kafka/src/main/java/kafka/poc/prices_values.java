/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package kafka.poc;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class prices_values extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7573873671524643007L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"prices_values\",\"namespace\":\"kafka.poc\",\"fields\":[{\"name\":\"price\",\"type\":\"double\"},{\"name\":\"curr\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<prices_values> ENCODER =
      new BinaryMessageEncoder<prices_values>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<prices_values> DECODER =
      new BinaryMessageDecoder<prices_values>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<prices_values> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<prices_values> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<prices_values>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this prices_values to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a prices_values from a ByteBuffer. */
  public static prices_values fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public double price;
  @Deprecated public java.lang.CharSequence curr;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public prices_values() {}

  /**
   * All-args constructor.
   * @param price The new value for price
   * @param curr The new value for curr
   */
  public prices_values(java.lang.Double price, java.lang.CharSequence curr) {
    this.price = price;
    this.curr = curr;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return price;
    case 1: return curr;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: price = (java.lang.Double)value$; break;
    case 1: curr = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Gets the value of the 'curr' field.
   * @return The value of the 'curr' field.
   */
  public java.lang.CharSequence getCurr() {
    return curr;
  }

  /**
   * Sets the value of the 'curr' field.
   * @param value the value to set.
   */
  public void setCurr(java.lang.CharSequence value) {
    this.curr = value;
  }

  /**
   * Creates a new prices_values RecordBuilder.
   * @return A new prices_values RecordBuilder
   */
  public static kafka.poc.prices_values.Builder newBuilder() {
    return new kafka.poc.prices_values.Builder();
  }

  /**
   * Creates a new prices_values RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new prices_values RecordBuilder
   */
  public static kafka.poc.prices_values.Builder newBuilder(kafka.poc.prices_values.Builder other) {
    return new kafka.poc.prices_values.Builder(other);
  }

  /**
   * Creates a new prices_values RecordBuilder by copying an existing prices_values instance.
   * @param other The existing instance to copy.
   * @return A new prices_values RecordBuilder
   */
  public static kafka.poc.prices_values.Builder newBuilder(kafka.poc.prices_values other) {
    return new kafka.poc.prices_values.Builder(other);
  }

  /**
   * RecordBuilder for prices_values instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<prices_values>
    implements org.apache.avro.data.RecordBuilder<prices_values> {

    private double price;
    private java.lang.CharSequence curr;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(kafka.poc.prices_values.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.curr)) {
        this.curr = data().deepCopy(fields()[1].schema(), other.curr);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing prices_values instance
     * @param other The existing instance to copy.
     */
    private Builder(kafka.poc.prices_values other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.price)) {
        this.price = data().deepCopy(fields()[0].schema(), other.price);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.curr)) {
        this.curr = data().deepCopy(fields()[1].schema(), other.curr);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public kafka.poc.prices_values.Builder setPrice(double value) {
      validate(fields()[0], value);
      this.price = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public kafka.poc.prices_values.Builder clearPrice() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'curr' field.
      * @return The value.
      */
    public java.lang.CharSequence getCurr() {
      return curr;
    }

    /**
      * Sets the value of the 'curr' field.
      * @param value The value of 'curr'.
      * @return This builder.
      */
    public kafka.poc.prices_values.Builder setCurr(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.curr = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'curr' field has been set.
      * @return True if the 'curr' field has been set, false otherwise.
      */
    public boolean hasCurr() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'curr' field.
      * @return This builder.
      */
    public kafka.poc.prices_values.Builder clearCurr() {
      curr = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public prices_values build() {
      try {
        prices_values record = new prices_values();
        record.price = fieldSetFlags()[0] ? this.price : (java.lang.Double) defaultValue(fields()[0]);
        record.curr = fieldSetFlags()[1] ? this.curr : (java.lang.CharSequence) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<prices_values>
    WRITER$ = (org.apache.avro.io.DatumWriter<prices_values>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<prices_values>
    READER$ = (org.apache.avro.io.DatumReader<prices_values>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
